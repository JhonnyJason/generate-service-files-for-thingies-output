// Generated by CoffeeScript 2.4.1
(function() {
  var cliargumentsmodule, extractMeowed, getHelpText, getOptions, log, meow, throwErrorOnUsageFail;

  cliargumentsmodule = {
    name: "cliargumentsmodule"
  };

  //region node_modules
  meow = require('meow');

  //endregion

  //log Switch
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["cliargumentsmodule"] != null) {
      console.log("[cliargumentsmodule]: " + arg);
    }
  };

  //region internal variables

  //endregion

  //#initialization function  -> is automatically being called!  ONLY RELY ON DOM AND VARIABLES!! NO PLUGINS NO OHTER INITIALIZATIONS!!
  cliargumentsmodule.initialize = function() {
    return log("cliargumentsmodule.initialize");
  };

  //region internal functions
  getHelpText = function() {
    log("getHelpText");
    return "Usage\n    $ generate-service-files-for-thingies <arg1> <arg2>\n    \nOptions\n    arg1, --machine-config <machine-config>, -c <machine-config>\n        path to file which is the machine-config\n    arg2, --output-directory <path/to/dir>, -o <path/to/dir>\n        path of directory where the generated service files should be stored\n    \nTO NOTE:\n    The flags will overwrite the flagless argument.\n\nExamples\n    $ generate-service-files-for-thingies  machine-config.js ../systemd-files\n    ...";
  };

  getOptions = function() {
    log("getOptions");
    return {
      flags: {
        machineConfig: {
          type: "string",
          alias: "c"
        },
        outputDirectory: {
          type: "string",
          alias: "o"
        }
      }
    };
  };

  extractMeowed = function(meowed) {
    var machineConfig, outputDirectory;
    log("extractMeowed");
    machineConfig = "";
    outputDirectory = "";
    if (meowed.input[0]) {
      machineConfig = meowed.input[0];
    }
    if (meowed.input[1]) {
      outputDirectory = meowed.input[1];
    }
    if (meowed.flags.machineConfig) {
      machineConfig = meowed.flags.machineConfig;
    }
    if (meowed.flags.outputDirectory) {
      outputDirectory = meowed.flags.outputDirectory;
    }
    return {machineConfig, outputDirectory};
  };

  throwErrorOnUsageFail = function(extract) {
    log("throwErrorOnUsageFail");
    if (!extract.machineConfig) {
      throw "Usage error: obligatory option machineConfig was not provided!";
    }
    if (!extract.outputDirectory) {
      throw "Usage error: obligatory option outputDirectory was not provided!";
    }
    if (!(typeof extract.machineConfig === "string")) {
      throw "Usage error: option machineConfig was provided in an unexpected way!";
    }
    if (!(typeof extract.outputDirectory === "string")) {
      throw "Usage error: option outputDirectory was provided in an unexpected way!";
    }
  };

  
  //endregion

  //region exposed functions
  cliargumentsmodule.extractArguments = function() {
    var extract, meowed, options;
    log("cliargumentsmodule.extractArguments");
    options = getOptions();
    meowed = meow(getHelpText(), getOptions());
    extract = extractMeowed(meowed);
    throwErrorOnUsageFail(extract);
    return extract;
  };

  //endregion exposed functions
  module.exports = cliargumentsmodule;

}).call(this);
