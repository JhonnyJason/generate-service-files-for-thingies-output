// Generated by CoffeeScript 2.4.1
(function() {
  var c, errLog, fs, generateControlLine, generateDescriptionLine, generateEnvironmentLine, generateExecutionLine, generatePermissionLine, generateServiceFile, generateSocketFile, log, pathHandler, servicefilegenmodule, successLog;

  servicefilegenmodule = {
    name: "servicefilegenmodule"
  };

  //region node_modules
  fs = require("fs").promises;

  c = require("chalk");

  //endregion

  //log Switch
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["servicefilegenmodule"] != null) {
      console.log("[servicefilegenmodule]: " + arg);
    }
  };

  //region internal variables
  errLog = function(arg) {
    return console.log(c.red(arg));
  };

  successLog = function(arg) {
    return console.log(c.green(arg));
  };

  pathHandler = null;

  //endregion

  //#initialization function  -> is automatically being called!  ONLY RELY ON DOM AND VARIABLES!! NO PLUGINS NO OHTER INITIALIZATIONS!!
  servicefilegenmodule.initialize = function() {
    log("servicefilegenmodule.initialize");
    return pathHandler = allModules.pathhandlermodule;
  };

  //region internal functions
  generateDescriptionLine = function(thingy) {
    var result;
    log("generateDescriptionLine");
    result = "";
    result += "Description=A thingy service in it's thingy ecosystem :-)\n";
    return result;
  };

  generatePermissionLine = function(thingy) {
    var result;
    log("generatePermissionLine");
    result = "";
    result += "User=" + thingy.homeUser + "\n";
    result += "Group=" + thingy.homeUser + "\n";
    return result;
  };

  generateExecutionLine = function(thingy) {
    var result;
    log("generateExecutionLine");
    result = "";
    result += "ExecStart=/usr/bin/node ";
    result += "/home/" + thingy.homeUser + "/" + thingy.repository + "/service.js\n";
    result += "WorkingDirectory=/home/" + thingy.homeUser + "/" + thingy.repository + "\n";
    return result;
  };

  generateEnvironmentLine = function(thingy) {
    var result;
    log("generateEnvironmentLine");
    result = "";
    if (thingy.socket) {
      result += "Environment=SOCKETMODE=true\n";
    } else if (thingy.port) {
      result += "Environment=PORT=" + thingy.port + "\n";
    } else {
      throw new Error("Neither socket nor port was defined!");
    }
    return result;
  };

  generateControlLine = function(thingy) {
    var result;
    log("generateControlLine");
    result = "";
    if (thingy.oneshot) {
      result += "Type=oneshot\n";
      result += "Restart=no\n";
    } else {
      result += "Restart=always\n";
    }
    return result;
  };

  generateServiceFile = async function(thingy) {
    var fileContent, filePath;
    log("generateServiceFile");
    if (!thingy.homeUser) {
      throw new Error("Service thingy has no homeUser defined!");
    }
    if (!thingy.repository) {
      throw new Error("Service thingy has no repository defined!");
    }
    fileContent = "[Unit]\n";
    fileContent += generateDescriptionLine(thingy) + "\n";
    fileContent += "[Service]\n";
    fileContent += generatePermissionLine(thingy) + "\n";
    fileContent += generateExecutionLine(thingy) + "\n";
    fileContent += generateEnvironmentLine(thingy) + "\n";
    fileContent += generateControlLine(thingy) + "\n";
    fileContent += "[Install]\n";
    fileContent += "WantedBy=multi-user.target\n";
    filePath = pathHandler.getServiceOutputPath(thingy.homeUser);
    await fs.writeFile(filePath, fileContent);
  };

  generateSocketFile = async function(thingy) {
    var fileContent, filePath;
    if (!thingy.socket) {
      return;
    }
    log("generateSocketFile");
    fileContent = "";
    fileContent += "[Socket]\n";
    fileContent += "ListenStream=/run/" + thingy.homeUser + ".sk\n\n";
    fileContent += "[Install]\n";
    fileContent += "WantedBy=sockets.target\n";
    filePath = pathHandler.getSocketOutputPath(thingy.homeUser);
    return (await fs.writeFile(filePath, fileContent));
  };

  //endregion

  //region exposed functions
  servicefilegenmodule.generateForThingy = async function(thingy) {
    var err, errorMessage;
    log("servicefilegenmodule.generateForThingy");
    // log "\n" + JSON.stringify(thingy, null, 2)
    if (thingy.type !== "service") {
      return;
    }
    try {
      await generateServiceFile(thingy);
      await generateSocketFile(thingy);
      return successLog(thingy.homeUser + " - service files generated");
    } catch (error) {
      err = error;
      errorMessage = thingy.homeUser + " - could not generate service files";
      errorMessage += "\nReason: " + err;
      return errLog(errorMessage);
    }
  };

  //endregion
  module.exports = servicefilegenmodule;

}).call(this);
